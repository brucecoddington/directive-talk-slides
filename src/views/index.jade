doctype html
include includes/mixins

+page("@&=?")
  +lecture-title-page("@&=?", "Communicating with Angular Directives")

  section
    h2 whoami?
    ul
      li Bruce Coddington
        a(href="https://twitter.com/brucecoddington", target="_blank") (@brucecoddington)
      li bruce.coddington@objectpartners.com
      li Github: brucecoddington

    h2(style="margin-top: 20px") Slides
    a(href="http://blog.coddington.io/directive-talk-slides") Available on Github

  section
    h2 Object Partners, Inc.
    ul
      li Founded 1996
      li Java, Groovy, JavaScript, Mobile, Open Source
      li ~100 Senior Consultants
        ul
          li Minneapolis, Omaha
          li Chicago, Denver
          li Average Tenure >5 years

  section
    h2 What are we doing?
    ul
      li Examine how to have custom directives communicate with the outside world.
      li I love questions, don't be shy

  section
    h1 Directives

  section
    p
      | At a high level, directives are markers on a DOM element (such as an attribute, element name, or CSS class)
      | that tell AngularJS's HTML compiler ($compile) to attach a specified behavior to that DOM element.

  section
    img.no-style.slide-image(src="/directive-talk-slides/assets/img/wat_grande.jpg")

  section
    p Angular is the meta-framework to create a new vocabulary(dsl) for the browser.
    p Directives are the glue between <strong>DOM</strong> and <strong>Scope</strong>.

  section
    img.no-style.slide-image(src="/directive-talk-slides/assets/img/highfive.gif")

  section
    p $compile can match directives based on element names,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;bc-bojack-horseman&gt; &lt;/bc-bojack-horseman&gt;

        </code>
    p attributes,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div bc-bojack-horseman&gt; &lt;/div&gt;

        </code>
    p class names,
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;div class="bc-bojack-horseman"&gt; &lt;/div&gt;

        </code>
    p and html comments.
    .text-center
      pre.
        <code class="html" data-trim>
        &lt;!-- directive: bc-bojack-horseman --&gt;

        </code>

  section
    p Below is an example of declaring a directive and referring to it in HTML.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('bcBojackHorseman', bcBojackHorseman);

      function bcBojackHorseman() {
        return {
          //directive configuration
        };
      }

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div bc-bojack-horseman&gt;&lt;/div&gt;

      </code>

  section
    h3 Directive Configuration
    ul
      li Template or TemplateUrl
      li Restrict (EACM)
      li Transclude
      li Replace
      li Compile or Linking function
      li Controller
      li Scope

  section
    h3 Scope

  section
    p By default, a directive uses the parent scope.
    p This can be problematic because it could set or change values that already exist, breaking encapsulation.

  section
    p
      | What we want to be able to do is separate the scope inside a directive from the scope outside, and
      | then map the outer scope to a directive's inner scope.

  section
    img.no-style.slide-image(src="/directive-talk-slides/assets/img/nested-scope.png")

  section
    p The directive below will have an isolate scope that is not mapped to anything in the parent scope (completely isolated)
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('bcBojackHorseman', bcBojackHorseman);

      function bcBojackHorseman() {
        return {
          scope: true
        };
      }

      </code>

  section
    p When we want to map the outer scope to the directives inner scope, we use a scope configuration object.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('bcBojackHorseman', bcBojackHorseman);

      function bcBojackHorseman() {
        return {
          scope: {
            // ...
          }
        };
      }

      </code>

  section
    p There are multiple ways to map parent scope to the isolate scope.
    p Lets start with the most common, attribute value or expression binding '@'.

  section
    p
    | The '@' binding maps the attribute value (string) in the context of the parent scope to the isolate scope.

  section
    p If scope.value was 5, the value of attributeValue in the isolate scope would be "11" (string).
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('bcBojackHorseman', bcBojackHorseman);

      function bcBojackHorseman() {
        return {
          scope: {
            attributeValue: '@'
          }
        };
      }

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div bc-bojack-horseman attribute-value="{{ scope.value + 6 }}" &gt;&lt;/div&gt;

      &lt;div bc-bojack-horseman attribute-value="11" &gt;&lt;/div&gt;

      </code>

  section
    p The second type of binding is the '=' or two way binding.

  section
    p This will instruct Angular to bind the value supplied with the element attribute "some-attribute" to the isolate scope.
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('bcBojackHorseman', bcBojackHorseman);

      function bcBojackHorseman() {
        return {
          scope: {
            someAttribute: '='
          }
        };
      }

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div bc-bojack-horseman some-attribute="myAttribute"&gt;&lt;/div&gt;

      </code>

  section
    p This will create a two way mapping between the parent scope and the isolate scope.
    p Changes made in the parent scope are reflected in the isolate scope and visa versa.
    img.no-style.slide-image(src="/directive-talk-slides/assets/img/scope.png")

  section
    p Lastly, we have function binding or '&'
    br
    pre.
      <code data-trim>
      angular.module('app.directives', [])
        .directive('bcBojackHorseman', bcBojackHorseman);

      function bcBojackHorseman() {
        return {
          scope: {
            someCalculation: '&'
          },
          link: function (scope, elem, attrs) {
            // something happens
            scope.someCalculation({amount: 5});
          }
        };
      }

      </code>
    pre.
      <code class="html" data-trim>
      &lt;div bc-bojack-horseman some-calculation="calculateSomeValue(amount)" &gt;&lt;/div&gt;

      </code>

  section
    h1 DEMO

  section
    h3 Plunks
    ul
      li
        a(href="http://plnkr.co/edit/hIOuuYhbTdfyBJZWVZZU", target="_blank") tightly coupled, inflexible with inherited scope
      li
        a(href="http://plnkr.co/edit/flF8U3WhgrZNs8WIKGpf", target="_blank") isolated scope, a little more flexible
      li
        a(href="http://plnkr.co/edit/1PM8bPkGcCkRp0tvCz9F", target="_blank") isolated scope with two-way binding
      li
        a(href="http://plnkr.co/edit/o9pBWpKRO1yftSQE249T", target="_blank") isolated scope with functional binding

  section
    img.no-style.slide-image(src="/directive-talk-slides/assets/img/mind-blown.gif")

  section
    h3 So when do I use what?
    ul
      li @ : for typical string values and one-way binding
      li = : for when you need two-way binding
      li & : for when you need a function called in the parent scope's context

  section
    h1 Thank You
    img.no-style.slide-image(src="/directive-talk-slides/assets/img/applause.gif")
